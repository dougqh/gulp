<project name="azul-build-macros" basedir="." default="zz-unrunnable">
    <target name="zz-unrunnable">
        <fail message="zz-unrunnable"/>
    </target>

    <property name="project.dir" location="${basedir}" />
    <property name="project.name" value="${ant.project.name}" />
    
    <property name="repository.dir" location="${build.project.dir}/central-repo" />
    <!-- <property name="project.repository.dir" location="${project.dir}/repo-lib" /> -->
    <property name="project.repository.dir" location="${build.project.dir}/project-repos/${project.name}" />
    
    <property name="src.dir" location="src" />
    <property name="build.dir" location="${build.project.dir}/build" />
    <property name="project.build.dir" location="${build.dir}/${project.name}" />
    <property name="class.dir" location="${project.build.dir}/classes" />
    
    <property name="defaults.wget.path" location="/usr/local/bin/wget" />

    <!-- http://central.maven.org/maven2/org/apache/poi/poi-scratchpad/3.15/poi-scratchpad-3.15.jar -->    
    <property name="defaults.maven.url.base" value="http://central.maven.org/maven2" />
    <property name="defaults.http.usecaches" value="true" />
    <property name="defaults.http.useresponsecode" value="true" />
    <property name="defaults.http.usetimestamp" value="true" />
    
    <property name="defaults.jdkrefid" value="defaultjdk" />

    <property name="defaults.javac.debug" value="true" />
    <property name="defaults.javac.deprecation" value="false" />

    <property name="defaults.jar.index" value="true" />

    <!-- definition of defaultjdk -->
    <property name="defaultjdk.jvm" value="${java.home}/bin/java" />
    <property name="defaultjdk.compiler" value="${java.home}/../bin/javac" />
    <property name="defaultjdk.version" value="${java.specification.version}" />
    <property name="defaultjdk.source" value="${java.specification.version}" />
    <property name="defaultjdk.target" value="${java.specification.version}" />
    <path id="defaultjdk.bootclasspathref">
      <filelist files="${sun.boot.class.path}" />
    </path>

    <!-- 
     Defines a JDK build configuration
     This includes the...
     - location of the JDK which is used to determine...
       - jvm (java executable)
       - compiler (javac executable)
       - bootclasspath - (basically the rt.jar against which to compile)
     - version which is used to set the default source input and target output
       for the compiler
     -->
    <macrodef name="azul.jdkdef">
        <attribute name="id" />
        <attribute name="location" />
        <attribute name="version" />
        <attribute name="source" default="@{version}" />
        <attribute name="target" default="@{version}" />
    
        <sequential>
            <property name="@{id}.jvm" location="@{location}/bin/java" />
            <property name="@{id}.compiler" location="@{location}/bin/javac" />
            <property name="@{id}.version" value="@{version}" />
            <property name="@{id}.source" value="@{source}" />
            <property name="@{id}.target" value="@{target}" />

            <path id="@{id}.bootclasspathref">
               <fileset dir="@{location}/lib/" includes="*.jar" />
               <fileset dir="@{location}/jre/lib/" includes="*.jar" />
            </path>
        </sequential>
    </macrodef>

    <!-- 
     Aliases a JDK - to another ID

     This can be used to alias a higher version JDK to target a lower version JDK,
     but must be used with care because the rt.jar may contain additional classes
     not present in the older JDK.

     This is similar to Ant's standard warning about setting target without setting
     bootclasspath.
     -->
    <macrodef name="azul.jdkalias">
        <attribute name="id" />
        <attribute name="refid" />
        <attribute name="target" default="${@{refid}.target}" />
        <attribute name="source" default="@{target}" />

        <sequential>
            <property name="@{id}.jvm" value="${@{refid}.jvm}" />
            <property name="@{id}.compiler" value="${@{refid}.compiler}" />
            <property name="@{id}.version" value="${@{refid}.version}" />
            <property name="@{id}.source" value="@{source}" />
            <property name="@{id}.target" value="@{target}" />
    
            <path id="@{id}.bootclasspathref">
                <path refid="@{refid}.bootclasspathref" />
            </path>
        </sequential>
    </macrodef>
    
   <macrodef name="azul.clean-all">
      <sequential>
        <delete dir="${build.dir}" includes="**/*" includeemptydirs="true" />
        <delete dir="${repository.dir}" includes="**/*" includeemptydirs="true" />
      </sequential>
    </macrodef>

    <macrodef name="azul.install-dependency">
        <attribute name="project" default="dne" />
        <attribute name="project.build.dir" default="${build.project.dir}/../@{project}" />
        
        <sequential>
            <echo message="[ant.install-dependency] project=@{project} target=install" />
            
            <ant antfile="@{project.build.dir}/build.xml" target="install" inheritall="false">
               <property name="build.project.dir" location="${build.project.dir}" />
               <property name="repository.dir" location="${repository.dir}" />
            </ant>
        </sequential>
    </macrodef>
    
    <!-- project-clean -->
    <macrodef name="azul.clean">
      <sequential>
        <delete dir="${project.repository.dir}" includes="**/*"
          includeemptydirs="true"
          failonerror="false" />
        
        <delete dir="${project.build.dir}" includes="**/*"
          includeemptydirs="true"
          failonerror="false" />
      </sequential>
    </macrodef>

    <!--
     Convenience for the common of compiling a single directory.
     Handles dependency checking, javac, resource copying, and source copying.
     
     Projects with multiple source directories - need to use the lower-level macros...
     - azul.depend
     - azul.javac
     - azul.copyresources
     - azul.copyjavasources
    -->
    <macrodef name="azul.compile">
      <attribute name="srcdir" default="${src.dir}" />
      <attribute name="destdir" default="${class.dir}" />

      <attribute name="jdkrefid" default="defaultjdk" />
      <attribute name="target" default="${@{jdkrefid}.target}" />
      <attribute name="source" default="@{target}" />

      <attribute name="deprecation" default="${defaults.javac.deprecation}" />
      <attribute name="debug" default="${defaults.javac.debug}" />

      <element name="classpath-contents" implicit="true" optional="true" />

      <sequential>
        <mkdir dir="@{destdir}" />

        <azul.depend srcdir="@{srcdir}" destdir="@{destdir}">
          <classpath-contents />
        </azul.depend>

        <azul.javac destdir="@{destdir}"
          source="@{source}" target="@{target}" 
          jdkrefid="@{jdkrefid}"
          debug="@{debug}" deprecation="@{deprecation}">

          <src location="@{srcdir}" />
          <classpath-contents />
        </azul.javac>

        <azul.copy-resources srcdir="@{srcdir}" destdir="@{destdir}" />
        <azul.copy-javasources srcdir="@{srcdir}" destdir="@{destdir}" />
      </sequential>
    </macrodef>

    <macrodef name="azul.depend">
      <attribute name="srcdir" default="${src.dir}" />
      <attribute name="destdir" default="${class.dir}" />

      <element name="classpath-contents" optional="true" implicit="true" />
    
      <sequential>
        <depend srcdir="@{srcdir}" destdir="@{destdir}">
          <classpath-contents />
        </depend>
      </sequential>
    </macrodef>

    <macrodef name="azul.javac">
      <attribute name="destdir" default="${class.dir}" />
    
      <attribute name="jdkrefid" default="defaultjdk" />
      <attribute name="target" default="${@{jdkrefid}.target}" />
      <attribute name="source" default="@{target}" />
    
      <attribute name="deprecation" default="${defaults.javac.deprecation}" />
      <attribute name="debug" default="${defaults.javac.debug}" />
      
      <element name="javac-contents" implicit="true" optional="true" />
      <sequential>
        <mkdir dir="@{destdir}" />
        
        <javac destdir="@{destdir}"
          source="@{source}" target="@{target}" 
          debug="@{debug}" deprecation="@{deprecation}"
          bootclasspathref="@{jdkrefid}.bootclasspathref"
          fork="true" executable="${@{jdkrefid}.compiler}"
          includeantruntime="false">
          
          <javac-contents />
        </javac>
      </sequential>
    </macrodef>
    
    <macrodef name="azul.copy-resources">
      <attribute name="srcdir" default="${src.dir}" />
      <attribute name="destdir" default="${class.dir}" />
      <attribute name="includes" default="**/*" />
      <sequential>
        <mkdir dir="@{destdir}" />
        
        <copy todir="@{destdir}">
          <fileset dir="@{srcdir}" includes="@{includes}" excludes="**/*.java" />
        </copy>
      </sequential>
    </macrodef>
    
    <macrodef name="azul.copy-javasources">
      <attribute name="srcdir" default="${src.dir}" />
      <attribute name="destdir" default="${class.dir}" />
      <attribute name="includes" default="**/*" />
      <sequential>
        <mkdir dir="@{destdir}" />
        
        <copy todir="@{destdir}">
          <fileset dir="@{srcdir}" includes="**/*.java" />
        </copy>
      </sequential>
    </macrodef>

    <!-- Clean for azul.compile -->
    <macrodef name="azul.deleteclasses">
      <attribute name="module" default="dne" />

      <attribute name="class.dir" default="${class.dir}/@{module}" />

      <sequential>
        <delete dir="@{class.dir}" includeemptydirs="true" failonerror="false" />
      </sequential>
    </macrodef>

    <!--
     JARs up output of a previous call to azul.compile - in a way that is compatible
     with azul.compile's dependency analysis
     -->
    <macrodef name="azul.jar">
      <attribute name="basedir" default="${class.dir}" />
      <attribute name="jar" default="${project.name}.jar" />
      <attribute name="destfile" default="${project.build.dir}/@{jar}" />
         
      <attribute name="index" default="${defaults.jar.index}" />
    
      <element name="jar-contents" implicit="true" optional="true" />

      <sequential>
        <!--  really should be the parent of destfile -->
        <mkdir dir="${project.build.dir}" />

        <jar basedir="@{basedir}" destfile="@{destfile}" index="@{index}" update="true" roundup="true">
          <jar-contents />
        </jar>
      </sequential>
    </macrodef>
  
    <macrodef name="azul.megajar">
      <attribute name="jar" default="${project.name}.jar" />
      <attribute name="destfile" default="${project.build.dir}/@{jar}" />
     
      <attribute name="index" default="${defaults.jar.index}" />
    
      <element name="jar-contents" implicit="true" optional="true" />

      <sequential>
        <!--  really should be the parent of destfile -->
        <mkdir dir="${project.build.dir}" />

        <echo message="megajar: @{destfile}" />

        <jar destfile="@{destfile}" index="@{index}" update="true" roundup="true" filesetmanifest="skip">
          <jar-contents />
        </jar>
      </sequential>
    </macrodef>

    <!-- https://search.maven.org/remotecontent?filepath=org/apache/poi/poi-scratchpad/4.0.0/poi-scratchpad-4.0.0.jar -->
    <macrodef name="azul.get-maven-lib">
      <attribute name="groupId" />
      <attribute name="artifactId" />
      <attribute name="version" />
      
      <attribute name="repourl" default="${defaults.maven.url.base}" />
      <attribute name="path" default="@{groupId}/@{artifactId}/@{version}/@{artifactId}-@{version}.jar" />
	
      <attribute name="destdir" default="${project.repository.dir}" />
      <attribute name="destfile" default="@{destdir}/@{artifactId}-@{version}.jar" />

      <attribute name="usecaches" default="${defaults.http.usecaches}" />
      <attribute name="useresponsecode" default="${defaults.http.usecaches}" />
      <attribute name="usetimestamp" default="${defaults.get.usetimestamp}" />
      <sequential>
        <mkdir dir="@{destdir}" />

      	<!-- intended for Ant http add-on 
        <http url="@{repourl}/@{path}" destfile="@{destfile}"
          usecaches="@{usecaches}"
          useresponsecode="@{useresponsecode}"
      	  usetimestamp="@{usetimestamp}">
          <param name="filepath" value="@{filepath}" />
        </http>
        -->

      	<!-- wget -O {destfile} {url} -->
      	<!-- DQH: spawn="true" does not work - at least on Mac -->
        <exec dir="@{destdir}" resolveexecutable="true"
          executable="${defaults.wget.path}"
          newenvironment="false"
          failifexecutionfails="false"
          failonerror="false">
          <arg value="--no-clobber" />
          <arg value="-O" /><arg value="@{destfile}" />
          <arg value="@{repourl}/@{path}" />
        </exec>
      </sequential>
    </macrodef>

    <macrodef name="azul.install-libs">
      <attribute name="libdir" default="${project.repository.dir}" />
      <attribute name="includes" default="*.jar" />
      <attribute name="todir" default="${repository.dir}" />
      
      <sequential>
        <copy todir="@{todir}">
          <fileset dir="@{libdir}" includes="@{includes}" />
        </copy>
      </sequential>
    </macrodef>
    
    <macrodef name="azul.install">
      <attribute name="jar" default="${project.name}.jar" />
      <attribute name="file" default="${project.build.dir}/@{jar}" />
        
      <attribute name="todir" default="${repository.dir}" />
        
      <sequential>
          <!-- really should be parent of file -->
          <mkdir dir="${repository.dir}" />
            
          <copy file="@{file}" todir="@{todir}" />
      </sequential>
    </macrodef>
</project>